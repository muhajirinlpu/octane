#!/usr/bin/env php
<?php

use Illuminate\Database\Connectors\ConnectionFactory;
use Laravel\Octane\ApplicationFactory;
use Laravel\Octane\RequestContext;
use Laravel\Octane\Stream;
use Laravel\Octane\Swoole\SwooleClient;
use Laravel\Octane\Worker;

ini_set('display_errors', 'stderr');

require_once __DIR__ . '/../src/Stream.php';
require_once __DIR__ . '/WorkerState.php';

$bootstrap = fn($serverState) => require __DIR__ . '/bootstrap.php';

$serverState = json_decode(file_get_contents(
    $serverStateFile = $_SERVER['argv'][1]
), true)['state'];

\Swoole\Coroutine\run(function () use ($serverState, $bootstrap) {
    $basePath = $bootstrap($serverState);

    /** @var Swoole\Coroutine\Http\Server $server */
    $server = require __DIR__ . '/createSwooleCoroutineServer.php';

    $swooleClient = new \Laravel\Octane\Swoole\SwooleClientCoroutine();

    $octaneConfig = $serverState['octaneConfig'];
    $publicPath = $serverState['publicPath'];

    $workerPools = new \Co\Channel($workerSize = 10);

    for ($i = 0; $i < $workerSize; $i++) {
        $appFactory = new ApplicationFactory($basePath);

        /** @var Worker $worker */
        $worker = tap(new Worker(
            $appFactory,
            $swooleClient,
        ))->boot();


        /** @var \Illuminate\Database\DatabaseManager $dbManager */
        $dbManager = $worker->application()->get('db');

        $pdoSample = [
            $dbManager->connection(),
            $dbManager->connection()->getReadPdo(),
            $dbManager->connection()->getPdo(),
        ];

        $workerPools->push($worker);
    }

    $server->handle('/', function (Swoole\Http\Request $request, Swoole\Http\Response $response) use ($workerPools, $publicPath, $swooleClient, $octaneConfig) {
        try {
            [$request, $requestContext] = $swooleClient->marshalRequest(new RequestContext([
                'swooleRequest' => $request,
                'swooleResponse' => $response,
                'publicPath' => $publicPath,
                'octaneConfig' => $octaneConfig,
            ]));

            /** @var Worker $worker */
            $worker = $workerPools->pop();

            $worker->handle($request, $requestContext);

            $workerPools->push($worker);
        } catch (Throwable $e) {
            Stream::shutdown($e);

            $response->setStatusCode(500);
            $response->end('Internal Server Error');
        }
    });

    $server->start();
});

